Katherine Li

a. A brief description of notable obstacles you overcame.
One of the hardest obstacles was figuring out how to work around all the different variables
that need to be checked in all the methods. I originally tried working with global 
variables, but I realized that became complicated when several tests were run in a row. 
That's why I ended up sticking to local variables and implementing for loops for each method. 
I also struggled with the fact that OC requires a P in order to play tracks, but that S can 
be used after OC. In order to work around this, I ended up creating 2 isPlaying variables.

b. A description of the design of your program. 
isValidCDPlayer employs a huge for loop and if-else statement. It runs through all the 
characters, checking that they're valid options. The method keeps track of if the CD player 
is open, has a CD, or is playing, as well as what track the CD is on. This allows it to 
determine if the command being used is valid before allowing the command to change the 
appropriate variables.

c. A list of the test data that could be used to thoroughly test your program, along with the 
reason for each test.
Oic: doesn't accept lowercase
OICR: can't remove when player is closed
OIC1: can't play tracks when play hasn't been pressed
OICPOCS: can stop after player has been opened and closed
OICPOC1: can't play without hitting play after C
OICP124: can't play in non-sequential order
OIP: can't play when player is open
OICPP: can press play twice
OICPSS: can't press stop twice
OICP123SP45SORICP12:check that right values are returned for all methods
OICP123ORICP1: CD starts playing from 1 again after being inserted
